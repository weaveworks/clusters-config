apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  labels:
    toolkit.fluxcd.io/tenant: team-podinfo
  name: team-podinfo
spec: {}
status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    toolkit.fluxcd.io/tenant: team-podinfo
  name: team-podinfo
  namespace: team-podinfo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    toolkit.fluxcd.io/tenant: team-podinfo
  name: team-podinfo-service-account-cluster-admin
  namespace: team-podinfo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: team-podinfo
  namespace: team-podinfo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  labels:
    toolkit.fluxcd.io/tenant: team-podinfo
  name: team-podinfo-team
  namespace: team-podinfo
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  - pods
  - services
  verbs:
  - get
  - list
- apiGroups:
  - apps
  resources:
  - deployments
  - replicasets
  verbs:
  - get
  - list
- apiGroups:
  - kustomize.toolkit.fluxcd.io
  resources:
  - kustomizations
  verbs:
  - get
  - list
  - patch
- apiGroups:
  - helm.toolkit.fluxcd.io
  resources:
  - helmreleases
  verbs:
  - get
  - list
  - patch
- apiGroups:
  - source.toolkit.fluxcd.io
  resources:
  - buckets
  - helmcharts
  - gitrepositories
  - helmrepositories
  - ocirepositories
  verbs:
  - get
  - list
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - infra.contrib.fluxcd.io
  resources:
  - terraforms
  verbs:
  - get
  - watch
  - list
  - patch
- apiGroups:
  - flagger.app
  resources:
  - canaries
  - metrictemplates
  verbs:
  - get
  - list
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gitops.weave.works
  resources:
  - gitopsclusters
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - infrastructure.cluster.x-k8s.io
  resources:
  - awsclusterstaticidentities
  - awsclusterroleidentities
  - azureclusteridentities
  - vsphereclusteridentities
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - pipelines.weave.works
  resources:
  - pipelines
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - pac.weave.works
  resources:
  - policies
  verbs:
  - watch
  - get
  - list
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - create
- apiGroups:
  - capi.weave.works
  resources:
  - capitemplates
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - clustertemplates.weave.works
  resources:
  - gitopstemplates
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    toolkit.fluxcd.io/tenant: team-podinfo
  name: team-podinfo-team
  namespace: team-podinfo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: team-podinfo-team
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: team-demo-limited-users@weave.works
---
apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  creationTimestamp: null
  labels:
    toolkit.fluxcd.io/tenant: team-podinfo
  name: weave.policies.tenancy.team-podinfo-allowed-application-deploy
spec:
  category: weave.categories.tenancy
  code: |
    package weave.tenancy.allowed_application_deploy

    controller_input := input.review.object
    violation[result] {
        namespaces := input.parameters.namespaces
        targetNamespace := controller_input.spec.targetNamespace
        not contains_array(targetNamespace, namespaces)
        result = {
        "issue detected": true,
        "msg": sprintf("using target namespace %v is not allowed", [targetNamespace]),
        }
    }
    violation[result] {
        serviceAccountName := controller_input.spec.serviceAccountName
        serviceAccountName != input.parameters.service_account_name
        result = {
        "issue detected": true,
        "msg": sprintf("using service account name %v is not allowed", [serviceAccountName]),
        }
    }
    contains_array(item, items) {
        items[_] = item
    }
  description: Determines which helm release and kustomization can be used in a tenant
  how_to_solve: ""
  id: weave.policies.tenancy.team-podinfo-allowed-application-deploy
  name: team-podinfo allowed application deploy
  parameters:
  - name: namespaces
    required: false
    type: array
    value:
    - team-podinfo
  - name: service_account_name
    required: false
    type: string
    value: team-podinfo
  provider: kubernetes
  severity: high
  standards: []
  tags:
  - tenancy
  targets:
    kinds:
    - HelmRelease
    - Kustomization
    labels: []
    namespaces:
    - team-podinfo
status: {}
---
apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  creationTimestamp: null
  labels:
    toolkit.fluxcd.io/tenant: team-podinfo
  name: weave.policies.tenancy.team-podinfo-allowed-repositories
spec:
  category: weave.categories.tenancy
  code: |
    package weave.tenancy.allowed_repositories

    controller_input := input.review.object
    namespace := controller_input.metadata.namespace
    violation[result] {
        controller_input.kind == "GitRepository"
        urls := input.parameters.git_urls
        url := controller_input.spec.url
        not contains_array(url, urls)
        result = {
        "issue detected": true,
        "msg": sprintf("Git repository url %v is not allowed for namespace %v", [url, namespace]),
        }
    }
    violation[result] {
        controller_input.kind == "Bucket"
        urls := input.parameters.bucket_endpoints
        url := controller_input.spec.endpoint
        not contains_array(url, urls)
        result = {
        "issue detected": true,
        "msg": sprintf("Bucket endpoint %v is not allowed for namespace %v", [url, namespace]),
        }
    }
    violation[result] {
        controller_input.kind == "HelmRepository"
        urls := input.parameters.helm_urls
        url := controller_input.spec.url
        not contains_array(url, urls)
        result = {
        "issue detected": true,
        "msg": sprintf("Helm repository url %v is not allowed for namespace %v", [url, namespace]),
        }
    }
    violation[result] {
        controller_input.kind == "OCIRepository"
        urls := input.parameters.oci_urls
        url := controller_input.spec.url
        not contains_array(url, urls)
        result = {
        "issue detected": true,
        "msg": sprintf("OCI repository url %v is not allowed for namespace %v", [url, namespace]),
        }
    }
    contains_array(item, items) {
        items[_] = item
    }
  description: Controls the allowed repositories to be used as sources
  how_to_solve: ""
  id: weave.policies.tenancy.team-podinfo-allowed-repositories
  name: team-podinfo allowed repositories
  parameters:
  - name: git_urls
    required: false
    type: array
    value:
    - https://github.com/weavegitops/demo3-repo
    - https://github.com/weavegitops/podinfo-app
  - name: bucket_endpoints
    required: false
    type: array
    value: null
  - name: helm_urls
    required: false
    type: array
    value: null
  - name: oci_urls
    required: false
    type: array
    value: null
  provider: kubernetes
  severity: high
  standards: []
  tags:
  - tenancy
  targets:
    kinds:
    - GitRepository
    - Bucket
    - HelmRepository
    - OCIRepository
    labels: []
    namespaces:
    - team-podinfo
status: {}
---
apiVersion: pac.weave.works/v2beta2
kind: Policy
metadata:
  creationTimestamp: null
  labels:
    toolkit.fluxcd.io/tenant: team-podinfo
  name: weave.policies.tenancy.team-podinfo-allowed-clusters
spec:
  category: weave.categories.tenancy
  code: |
    package weave.tenancy.allowed_clusters

    controller_input := input.review.object
    namespace := controller_input.metadata.namespace
    secrets := input.parameters.cluster_secrets
    violation[result] {
        controller_input.kind == "GitopsCluster"
        secret := controller_input.spec.secretRef.name
        not contains_array(secret, secrets)
        result = {
        "issue detected": true,
        "msg": sprintf("cluster secretRef %v is not allowed for namespace %v", [secret, namespace]),
        }
    }
    violation[result] {
        controller_input.kind == "Kustomization"
        secret := controller_input.spec.kubeConfig.secretRef.name
        not contains_array(secret, secrets)
        result = {
        "issue detected": true,
        "msg": sprintf("kustomization kubeconfig secretRef %v is not allowed for namespace %v", [secret, namespace]),
        }
    }
    contains_array(item, items) {
        items[_] = item
    }
  description: Controls the allowed clusters to be added
  how_to_solve: ""
  id: weave.policies.tenancy.team-podinfo-allowed-clusters
  name: team-podinfo allowed clusters
  parameters:
  - name: cluster_secrets
    required: false
    type: array
    value:
    - demo-workspaces-50-24-kubeconfig
  provider: kubernetes
  severity: high
  standards: []
  tags:
  - tenancy
  targets:
    kinds:
    - GitopsCluster
    - Kustomization
    labels: []
    namespaces:
    - team-podinfo
status: {}
---
